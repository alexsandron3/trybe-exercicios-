{"ast":null,"code":"// src/store/index.js\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nconst GET_IMAGE = 'GET_IMAGE';\nconst REQUEST_IMAGE = 'REQUEST_IMAGE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nfunction getImage(json) {\n  return {\n    type: GET_IMAGE,\n    payload: json.message\n  };\n}\n\nfunction requestDog() {\n  return {\n    type: REQUEST_IMAGE\n  };\n}\n\nfunction failedRequest(error) {\n  return {\n    type: FAILED_REQUEST,\n    payload: error\n  };\n}\n\nexport function fetchDog() {\n  return dispatch => {\n    dispatch(requestDog());\n    return fetch('https://dog.ceo/api/breeds/image/random').then(r => r.json().then(json => dispatch(getImage(json)), error => dispatch(failedRequest(error))));\n  };\n}\nconst initialState = {\n  isFetching: false,\n  imagePath: '',\n  error: ''\n};\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case REQUEST_IMAGE:\n      return { ...state,\n        isFetching: true\n      };\n\n    case GET_IMAGE:\n      return { ...state,\n        imagePath: action.payload,\n        isFetching: false\n      };\n\n    case FAILED_REQUEST:\n      return { ...state,\n        error: action.payload,\n        isFetching: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);\nexport default store;","map":{"version":3,"sources":["/home/alesk/trybe-exercicios-/front-end/bloco-15/examples/doguinhos-app/src/store/index.js"],"names":["createStore","applyMiddleware","thunk","GET_IMAGE","REQUEST_IMAGE","FAILED_REQUEST","getImage","json","type","payload","message","requestDog","failedRequest","error","fetchDog","dispatch","fetch","then","r","initialState","isFetching","imagePath","reducer","state","action","store"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAO;AAAEC,IAAAA,IAAI,EAAEL,SAAR;AAAmBM,IAAAA,OAAO,EAAEF,IAAI,CAACG;AAAjC,GAAP;AACD;;AAED,SAASC,UAAT,GAAsB;AACpB,SAAO;AAAEH,IAAAA,IAAI,EAAEJ;AAAR,GAAP;AACD;;AAED,SAASQ,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAO;AAAEL,IAAAA,IAAI,EAAEH,cAAR;AAAwBI,IAAAA,OAAO,EAAEI;AAAjC,GAAP;AACD;;AAED,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,WAAOK,KAAK,CAAC,yCAAD,CAAL,CAAiDC,IAAjD,CAAuDC,CAAD,IAC3DA,CAAC,CAACX,IAAF,GAASU,IAAT,CACGV,IAAD,IAAUQ,QAAQ,CAACT,QAAQ,CAACC,IAAD,CAAT,CADpB,EAEGM,KAAD,IAAWE,QAAQ,CAACH,aAAa,CAACC,KAAD,CAAd,CAFrB,CADK,CAAP;AAMD,GARD;AASD;AAED,MAAMM,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBR,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,SAASS,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AAC7C,UAAQA,MAAM,CAAChB,IAAf;AACE,SAAKJ,aAAL;AACE,aAAO,EAAE,GAAGmB,KAAL;AAAYH,QAAAA,UAAU,EAAE;AAAxB,OAAP;;AACF,SAAKjB,SAAL;AACE,aAAO,EAAE,GAAGoB,KAAL;AAAYF,QAAAA,SAAS,EAAEG,MAAM,CAACf,OAA9B;AAAuCW,QAAAA,UAAU,EAAE;AAAnD,OAAP;;AACF,SAAKf,cAAL;AACE,aAAO,EAAE,GAAGkB,KAAL;AAAYV,QAAAA,KAAK,EAAEW,MAAM,CAACf,OAA1B;AAAmCW,QAAAA,UAAU,EAAE;AAA/C,OAAP;;AACF;AACE,aAAOG,KAAP;AARJ;AAUD;;AAED,MAAME,KAAK,GAAGzB,WAAW,CAACsB,OAAD,CAAzB;AAEA,eAAeG,KAAf","sourcesContent":["// src/store/index.js\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nconst GET_IMAGE = 'GET_IMAGE';\nconst REQUEST_IMAGE = 'REQUEST_IMAGE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nfunction getImage(json) {\n  return { type: GET_IMAGE, payload: json.message };\n}\n\nfunction requestDog() {\n  return { type: REQUEST_IMAGE };\n}\n\nfunction failedRequest(error) {\n  return { type: FAILED_REQUEST, payload: error };\n}\n\nexport function fetchDog() {\n  return (dispatch) => {\n    dispatch(requestDog());\n    return fetch('https://dog.ceo/api/breeds/image/random').then((r) =>\n      r.json().then(\n        (json) => dispatch(getImage(json)),\n        (error) => dispatch(failedRequest(error))\n      )\n    );\n  };\n}\n\nconst initialState = {\n  isFetching: false,\n  imagePath: '',\n  error: '',\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST_IMAGE:\n      return { ...state, isFetching: true };\n    case GET_IMAGE:\n      return { ...state, imagePath: action.payload, isFetching: false };\n    case FAILED_REQUEST:\n      return { ...state, error: action.payload, isFetching: false };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}